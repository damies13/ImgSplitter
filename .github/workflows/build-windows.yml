name: Build Windows

on: [push]

env:
  KIVY_GL_BACKEND: angle_sdl2
  # https://github.com/Alb-310/Geogramint/issues/8#issuecomment-1366548008

jobs:
  Build-Windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Check if should run build
        id: run_build
        uses: dorny/paths-filter@v3
        with:
          base: '${{ env.base }}'
          filters: |
            files:
              - 'src/**'
              - 'build_requirements/**'
              - '.github/workflows/build-windows.yml'

      - name: Get ImageSplitter Version Number
        if: steps.run_build.outputs.files == 'true'
        shell: python
        run: |
          import os
          import sys
          print("GITHUB_WORKSPACE:", os.getenv('GITHUB_WORKSPACE'))
          sys.path.append(os.path.abspath(os.path.join(os.getenv('GITHUB_WORKSPACE'), "src")))
          from __version__ import __version__

          print("__version__:", __version__)

          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
            myfile.write("appversion={}\n".format(__version__))

      - name: install pip packages - win
        if: steps.run_build.outputs.files == 'true'
        run: pip install -r build_requirements/pip_requirements-win.txt

      - name: install pip packages - kivy
        if: steps.run_build.outputs.files == 'true'
        run: pip install -r build_requirements/pip_requirements.txt

      - name: copy spec file
        if: steps.run_build.outputs.files == 'true'
        run: copy build_requirements/ImgSplitter-windows-onefile.spec.src ImgSplitter.spec

      - name: build spec
        if: steps.run_build.outputs.files == 'true'
        run: python -m PyInstaller ImgSplitter.spec

      - name: Archive Manager Build
        if: steps.run_build.outputs.files == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-windows-v${{ env.appversion }}
          path: build

      - name: Archive Manager dist
        if: steps.run_build.outputs.files == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ImgSplitter_v${{ env.appversion }}
          path: dist

  Test-Windows:
    runs-on: windows-latest
    needs: Build-Windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          # python-version: "3.x"
          python-version: "3.12"

      - name: Get ImageSplitter Version Number
        shell: python
        run: |
          import os
          import sys
          print("GITHUB_WORKSPACE:", os.getenv('GITHUB_WORKSPACE'))
          sys.path.append(os.path.abspath(os.path.join(os.getenv('GITHUB_WORKSPACE'), "src")))
          from __version__ import __version__

          print("__version__:", __version__)

          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
            myfile.write("appversion={}\n".format(__version__))

      - name: install pip packages - macos
        run: pip install -r Testing/requirements-test-win.txt

      - name: install pip packages - robot
        run: pip install -r Testing/requirements-test.txt

      - name: Archive Manager dmg
        uses: actions/download-artifact@v4
        with:
          name: ImgSplitter_v${{ env.appversion }}
          path: dist
      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Run Tests
        id: robottest
        run: >
          robot
          --outputdir Tests-Logs
          Testing/ImgSplitter.robot

      - name: Try and fix images with relative path
        if: '!cancelled()'
        run: |
          cd Tests-Logs
          sed --in-place=.bak 's/img src=".*Tests-Logs/img src="./g' ./output.xml
          rebot ./output.xml

      - name: Archive Manager dmg
        if: '!cancelled()'
        uses: actions/upload-artifact@v4
        with:
          name: Tests-Logs-windows-v${{ env.appversion }}
          path: Tests-Logs





#
